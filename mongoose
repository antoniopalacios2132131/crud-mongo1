const mongoose = require('mongoose')
const url = 'mongodb://localhost/db_alumnos'
mongoose.connect(url, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  useFindAndModify: false,
  useCreateIndex: true
})
const db = mongoose.connection
db.on('error', console.error.bind(console, 'Error al conectar MongoDB'))
db.once('open', function callback() {
    console.log("¡Conectado a MongoDB!")
})
module.exports = db

const express = require('express')
const app = express()

const db = require('./db')

app.set('view engine', 'ejs')

app.use(express.urlencoded({extended:true}))
app.use(express.json())

app.use(express.static('public'))

const alumnos = require('./routes/alumnos')
app.use(alumnos)


app.listen(3000, ()=>{
    console.log('¡Server UP! en http://localhost:3000')
})

<!doctype html>
<html lang="en">
  <head>
        <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-+0n0xVW2eSR5OomGNYDnhzAbDsOXxcvSN1TPprVMTNDbiYZCxYbOOl7+AMvyTG2x" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css">
    <link rel="stylesheet" href="css/style.css">
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <title>Bienvenido a Netflex</title>
    <style>
        .container{
            max-width: 960px;
        }
    </style>
  </head>
  <body>    
    <div class="container" style="text-align: center;">
        <div class="dd" style=" background: transparent;
        border: 2px solid rgba(255, 255, 255, .5);">
            <h4>Netflex</h4>
            <i class='bx bxs-user-circle' style="font-size: 130px;"></i><br>
            <form action="/crear" method="POST">
                <div class="col-md-6">
                    <label for="Titulo" class="form-label">Titulo</label>
                    <input id="Titulo" name="Titulo" type="text" class="form-control" required >
                </div>
                <div class="col-md-6">
                  <label for="Genero" class="form-label">Genero</label>
                  <input id="Genero" name="Genero" type="text" class="form-control" required>
              </div>
              <div class="col-md-6">
                <label for="Descripcion" class="form-label">Descripcion</label>
                <input id="Descripcion" name="Descripcion" type="text" class="form-control" required>
            </div>
                <div class="col-md-6">
                    <label for="Duracion" class="form-label">Duracion Min.</label>
                    <input id="Duracion" name="Duracion" type="number" class="form-control" required >
                </div>
         </div> 
         <br>
                <button type="submit" class="w-100 btn btn-guardar btn-lg"><i class="bi bi-save"></i>Registrar Carga</button>
            </form>
            <table id="tablaAlumnos" class="table mt-4" style="color: aliceblue; font-size: 20px; font-family: Georgia, 'Times New Roman', Times, serif;">
                <thead>
                    <tr>
                        <th style="display: none;">ID</th>
                        <th>Titulo</th>
                        <th>Genero</th>
                        <th>Descripcion</th>
                        <th>Duracion Min.</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    <% alumnos.forEach( (alumno) => { %>
                        <tr>
                            <td style="display: none;"><%= alumno._id %></td>
                            <td><%= alumno.Titulo %></td>
                            <td><%= alumno.Genero %></td>
                            <td><%= alumno.Descripcion %></td>
                            <td><%= alumno.Duracion %></td>
                            <td>
                                <a type="button" class="btnEditar btn btn-outline-primary bi bi-pencil"></a>
                                <a href="/borrar/<%= alumno._id %>" class="btn btn-outline-danger bi bi-trash"></a>
                            </td>
                        </tr>
                    <% }) %>
                </tbody>
            </table>
    </div>

    <div id="modalAlumno" class="modal fade" tabindex="-1" aria-labelledby="modalAlumno" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header bg-primary text-white">
              <h5 class="modal-title" id="exampleModalLabel">Editar Pelicula</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <form action="/editar" method="POST">
                  <input name="id_editar" id="id_editar" type="text" hidden>
                <div class="mb-3">
                  <label for="titulo_editar" class="col-form-label">Titulo</label>
                  <input id="titulo_editar" name="titulo_editar" type="text" class="form-control" value="">
                </div>
                <div class="mb-3">
                  <label for="genero_editar" class="col-form-label">Genero</label>
                  <input id="genero_editar" name="genero_editar" type="text" class="form-control" value="">
                </div>
                <div class="mb-3">
                  <label for="descripcion_editar" class="col-form-label">Descripcion</label>
                  <input id="descripcion_editar" name="descripcion_editar" type="text" class="form-control" value="">
                </div>
                <div class="mb-3">
                  <label for="duracion_editar" class="col-form-label">Duracion Min.</label>
                  <input id="duracion_editar" name="duracion_editar" type="number" class="form-control" value="">
                </div>
             
            </div>
            <div class="modal-footer">              
              <button type="submit" class="btn btn-primary">Actualizar</button>
            </div>
          </form>
          </div>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-gtEjrD/SeCtmISkJkNUaaKMoLD0//ElJ19smozuHV6z3Iehds+3Ulb9Bn9Plx0x4" crossorigin="anonymous"></script>
    <script src="js/code.js"></script>
  </body>
</html>

const express = require('express')
const router = express.Router()

const alumnoController = require('../controllers/alumnoController')

router.get('/', alumnoController.mostrar)

router.post('/crear', alumnoController.crear)

router.post('/editar', alumnoController.editar)

router.get('/borrar/:id', alumnoController.borrar)
module.exports = router

const modalAlumno = new bootstrap.Modal(document.getElementById('modalAlumno'))
const on = (element, event, selector, handler) => {
    element.addEventListener(event, e => {
        if(e.target.closest(selector)){
            handler(e)
        }
    })
}
on(document, 'click', '.btnEditar', e =>{
    const fila = e.target.parentNode.parentNode
    id_editar.value = fila.children[0].innerHTML
    titulo_editar.value = fila.children[1].innerHTML
    genero_editar.value = fila.children[2].innerHTML
    descripcion_editar.value = fila.children[3].innerHTML
    duracion_editar.value = fila.children[4].innerHTML
    modalAlumno.show()
})

const mongoose = require('mongoose')
const Schema = mongoose.Schema
const alumnoSchema = new Schema ({
    Titulo: String,
    Genero:String,
    Descripcion:String,
    Duracion:Number
}, {versionKey:false})
module.exports = mongoose.model('alumnos', alumnoSchema)

const Alumno = require('../model/Alumno')

module.exports.mostrar = (req, res)=>{
    Alumno.find({}, (error, alumnos)=>{
        if(error) {
            return res.status(500).json({
                message: 'Error mostrando los alumnos'
            })
        }
        return res.render('index', {alumnos: alumnos})
    })
}

module.exports.crear = (req, res)=>{

    const alumno = new Alumno({
        Titulo: req.body.Titulo,
        Genero: req.body.Genero,
        Descripcion: req.body.Descripcion,
        Duracion: req.body.Duracion
    })
    alumno.save(function(error,alumno){
        if(error){
            return res.status(500).json({
                message: 'Error al crear el Alumno'
            })
        }
        res.redirect('/')
    })
}

module.exports.editar = (req,res)=>{
    const id = req.body.id_editar
    const Titulo = req.body.titulo_editar
    const Genero = req.body.genero_editar
    const Descripcion = req.body.descripcion_editar
    const Duracion = req.body.duracion_editar
    Alumno.findByIdAndUpdate(id, {Titulo,Genero,Descripcion, Duracion}, (error, alumno)=>{
        if(error){
            return res.status(500).json({
                message: 'Error actualizando el Alumno'
            })
        }
        res.redirect('/')
    })
}

module.exports.borrar = (req, res)=>{
    const id = req.params.id
    Alumno.findByIdAndRemove(id, (error, alumno)=>{
        if(error){
            return res.status(500).json({
                message: 'Error eliminando el Alumno'
            })
        }
        res.redirect('/')
    })
}
